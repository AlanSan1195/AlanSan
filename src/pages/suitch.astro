---
import Layout from "../layouts/Layout.astro";
import SocialMedia from "../components/Social.astro";
---

<Layout title="Proyecto Suitch - Alan San ">
  <section class="relative max-w-3xl mx-auto overflow-hidden py-14 z-10">
    <div class="relative px-4 mb-6">
      <div class="mx-auto mt-2">
        <a
          href="/"
          class="p-3 w-fit bg-black/40 border-[1.5px] border-white/20 outline outline-offset-[0.5px] outline-black rounded-full text-sm text-gray-300 hover:text-white justify-center flex"
        >
          <svg
            class="w-4 h-4"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
          </svg>
        </a>
      </div>
      <!-- Hero -->

      <h1 class="text-4xl md:text-6xl font-static text-white mb-6">
        Plataforma de Streaming - Suitch
      </h1>
      <p
        class="font-static text-sm md:text-medium md:text-xl text-gray-300 mb-4 max-w-3xl"
      >
        Simulación de Twitch desarrollada con React, y la API oficial de Twitch
      </p>
      <div class="flex w-fit items-center">
        <a
          href="https://suitch.netlify.app/"
          target="_blank"
          rel="noopener noreferrer"
          class="font-static text-xs md:text-medium bg-black/40 border-[1.5px] border-white/10 outline outline-offset-[0.5px] outline-black rounded-xl px-4 py-2 w-fit text-gray-300 hover:text-white no-underline"
        >
          Ver Sitio Web
          <svg
            class="ml-2 w-3 h-3 md:w-4 md:h-4"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"
            ></path>
          </svg>
        </a>
      </div>
    </div>
    <!-- Img Demo -->

    <div class="max-w-3xl mx-auto px-4 lg:px-8">
      <img
        src="/imagenes/suitch2ble.webp"
        alt="Captura de pantalla de Suitch - Plataforma de streaming"
        class="w-full h-auto object-cover bg-black/40 border-[1.5px] border-white/10 outline outline-offset-[0.5px] outline-black rounded-3xl"
        loading="lazy"
      />
    </div>
  </section>

  <!-- proyecto review -->
  <section class="py-14 z-10 max-w-3xl md:max-w-4xl mx-auto">
    <div class="px-4 md:px-10">
      <div class="">
        <div class="flex flex-col md:px-8">
          <h2 class="text-2xl md:text-5xl font-static text-white mb-6">
            Descripción General del Proyecto
          </h2>
          <p
            class="font-static text-sm md:text-medium md:text-xl text-gray-300"
          >
            <strong class="text-white">Suitch</strong> es una simulación de la plataforma
            Twitch que desarrollé para practicar y perfeccionar mis habilidades en
            React. El proyecto permite buscar streamers reales y ver su contenido
            en vivo, replicando la experiencia de usuario de la plataforma original.
          </p>
          <p
            class="font-static text-sm md:text-medium md:text-xl text-gray-300"
          >
            Este proyecto me permitió enfrentarme a desafíos reales como el
            manejo de APIs externas, la gestión de estados y la implementación
            de páginas dinámicas con Astro.
          </p>
          <div class="flex flex-wrap w-full gap-2 justify-center">
            <span
              class="px-3 py-1 bg-black/30 backdrop-blur-3xl border-[1.5px] border-white/10 outline outline-offset-[0.5px] outline-black rounded-full text-sm"
              >Astro</span
            >
            <span
              class="px-3 py-1 bg-black/30 backdrop-blur-3xl border-[1.5px] border-white/10 outline outline-offset-[o.5px] outline-black rounded-full text-sm"
              >React</span
            >
            <span
              class="px-3 py-1 bg-black/30 backdrop-blur-3xl border-[1.5px] border-white/10 outline outline-offset-[0.5px] outline-black rounded-full text-sm"
              >Tailwind CSS</span
            >
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Tecnologias usadas -->
  <section class="py-14 z-10 max-w-3xl md:max-w-4xl mx-auto">
    <div class="px-4 md:px-16">
      <h2 class="text-2xl md:text-5xl font-bold text-white mb-12">
        Tecnologías usadas
      </h2>
      <ol class="space-y-8 md:space-y-8 list-decimal pl-6">
        <li>
          <p
            class="font-static text-sm md:text-medium md:text-xl text-gray-300"
          >
            <strong class="text-white">Astro Framework:</strong> Utilizado para crear
            una aplicación web estática optimizada, aprovechando la facilidad que
            es trabajar con Astro para este tipo de proyects donde se optimiza mucho
            el uso de JavaScript
          </p>
        </li>

        <li>
          <p
            class="font-static text-sm md:text-medium md:text-xl text-gray-300"
          >
            <strong class="text-white">JavaScript:</strong> Para implementación de
            funcionalidades dinámicas como la aleatoriedad de particulas de humo
            y manejo de interacciones del usuario.
          </p>
        </li>

        <li>
          <p
            class="font-static text-sm md:text-medium md:text-xl text-gray-300"
          >
            <strong class="text-white">React:</strong> Implementación de useState
            para manejo de estado local y useContext para compartir estado entre
            componentes, especialmente para el colapso de la barra lateral.
          </p>
        </li>
      </ol>
    </div>
  </section>

  <!-- Lo que aprendi -->
  <section class="z-10 max-w-3xl md:max-w-4xl mx-auto">
    <h2 class="font-static text-2xl md:text-3xl text-center">Lo que Aprendí</h2>
    <div class="grid grid-cols-1 gap-y-4 text-pretty">
      <div class="">
        <h3
          class="font-static text-sm md:text-lg text-pink-400 mb-4 text-center"
        >
          Desarrollo
        </h3>
        <ul class="space-y-3 text-gray-300 font-static px-6   md:px-16">
          <li
            class="flex font-static m-0 md:text-lg my-2 text-gray-300 text-sm"
          >
            <span class="text-pink-500 mr-2">•</span>
            Uso de los hooks useState y useContext para el manejo de estado y la
            compartición de datos entre componentes.
          </li>
          <li
            class="flex font-static m-0 md:text-lg my-2 text-gray-300 text-sm"
          >
            <span class="text-pink-500 mr-2">•</span>
            Implementación de rutas dinámicas en Astro para generar perfiles únicos
            de cada streamer con pre-renderizado.
          </li>
          <li
            class="flex font-static m-0 md:text-lg my-2 text-gray-300 text-sm"
          >
            <span class="text-pink-500 mr-2">•</span>

            Dominar useContext() para crear un componente padre que envuelve
            children y comparte interactividad entre componentes. Especialmente
            útil para el colapso de la barra lateral que afecta a múltiples
            componentes.
          </li>
          <li
            class="flex items-start font-static m-0 md:text-lg my-2 text-gray-300 text-sm"
          >
            <span class="text-pink-500 mr-2">•</span>

            Resolver restricciones CORS para iframes de Twitch,
          </li>
          <li
            class="flex items-start font-static m-0 md:text-lg my-2 text-gray-300 text-xs"
          >
            <span class="text-pink-400 mr-2">•</span>
            Uso seguro de la API de Twitch con variables de entorno para tokens y
            despliegue en Netlify.
          </li>
        </ul>
      </div>
    </div>
  </section>

  <!-- Implementacion tecnica -->
  <section class="py-24 z-10  max-w-3xl md:max-w-4xl mx-auto ">
    <div class="px-4 md:px-20 ">
      <h2 class="text-2xl md:text-5xl font-static m-0">
        Implementación Técnica
      </h2>
      <div class="grid grid-cols-1 ">
        <h3 class="text-sm md:text-xl font-static text-white">
          UseContext y createContext para el manejo de estado
        </h3>
        <p class="font-static text-sm md:text-lg text-gray-300 mb-4">
          Mientras avanzaba en mi proyecto, descubrí que necesitábamos una forma
          de compartir el estado entre componentes sin tener que pasar props a
          través de cada nivel. Así fue como encontré el uso de <strong
            class="text-white">createContext</strong
          >. Aunque no lo conocía al iniciar el proyecto, esta experiencia me
          enseñó a mejora y enetender la forma en la que busco documentacion
          descubirendo recuross interessantes para este Framework.
        </p>
        <div class="bg-zinc-900 rounded-lg p-4 text-xs">
          <pre
            class="text-green-400 text-xs overflow-x-auto">
  <code>{`//  import { createContext, useContext, useState } from "react";
//aprendimos **createContext()**
const initialContext = createContext(true)
//Basicamente es un componente que comparte un estado inicial y que le dices que renderizara lo que yo ponga dentro de el {{children}}

export function SanstreamLyout({children}) {

  const [context, setContext] = useState(true); // Estado compartido

  return (
    <>
     <initialContext.Provider value = {{context, setContext}}>
      {children}
     </initialContext.Provider>
    </>
  );
}

//  ESTE WRAPER MODIFICA EL RENDERIZADO DEL RECOMMENDEDCHANNELS Y EL PERFIL DEL USUARIO  D
export function SanstreamLyoutPerfil({children}) {

  const [context, setContext] = useState(false); // Estado compartido

  return (
    <>
     <initialContext.Provider value = {{context, setContext}}>
      {children}
     </initialContext.Provider>
    </>
  );
}
export function useInitialContext(){
  return useContext(initialContext)
}

`}</code>
</pre>
        </div>
      </div>
    </div>
    <div
      class="hidden
              justify-center
              items-center
              md:flex
              my-16
              md:flex-col"
    >
      <footer
        class="w-full flex z-10 justify-center items-center"
        role="contentinfo"
        aria-label="Site footer"
      >
        <div class="flex-col justify-center items-center">
          <figure
            class="rounded-full w-10 h-10 border-white/60 border-[1px] mx-auto"
          >
            <img
              src="/imagenes/FotoPerfil.webp"
              alt="Foto de perfil de Alan San, desarrollador frontend"
              class="absolute w-10 h-10 rounded-full border-white/60 border-[1px] p-1"
              width="56"
              height="56"
              loading="lazy"
            />
          </figure>
          <p class="font-static font-bold opacity-80 mx-6 mt-5">
            Made by <a
              href="https://github.com/AlanSan1195"
              class="text-white hover:cursor-pointer no-underline"
              rel="author"
              title="Visit Alan San profile">Alan San</a
            >
          </p>
          <SocialMedia />
        </div>
      </footer>
    </div>
  </section>
</Layout>

<style>
  code {
    font-family: "Courier New", monospace;
    line-height: 1.4;
  }
  .informative {
    font-family: "static";
    font-size: 20px;
    opacity: 0.8;
  }
</style>
